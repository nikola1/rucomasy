#!/usr/bin/env ruby
require 'trollop'
require '../core/rucomasy'
require '../db/data_mapper'

require './persistance_manager'
require './task_persistance_manager'
require './contest_persistance_manager'
require './testcase_persistance_manager'

module Rucomasy
  module Rat
    CHARS_PER_LINE = 80
  end
end

def wait_for(commands)
  Trollop::options do
    stop_on commands
  end
  ARGV.shift
end

def parse(date)
  DateTime.parse date unless date.nil?
end
action = wait_for %w(add edit delete list)

if action == 'list'
  domain = wait_for %w(contests tasks testcases)

  puts "=" * Rucomasy::Rat::CHARS_PER_LINE
  if domain == 'contests'
    Rucomasy::Rat::ContestPersistanceManager.instance.select(order: [:start_date.desc]).each &:print
  elsif domain == 'tasks'
    Rucomasy::Rat::TaskPersistanceManager.instance.select(order: [:id.desc]).each &:print
  elsif domain == 'testcases'
    Rucomasy::Rat::    TestcasePersistanceManager.instance.select(order: [:id.desc]).each &:print
  else
    Trollop::die 'What?!'
  end
else
  domain = wait_for %w(contest task testcases)

  cmd_opts = Trollop::options do
    opt :all, "Apply action on all matching objects.", defaul: false if action == 'delete'
    case domain
      when "contest"
        opt :id,
            "Contest id",
            type: :int, required: (action == 'edit') unless action == 'add'

        opt :name,
            "Name of the contest",
            type: :string, required: (action == 'add')

        opt :description,
            "Description of the contest",
            type: :string

        opt :start_date,
            "Start date",
            type: :string, required: (action == 'add')

        opt :end_date,
            "End date",
            type: :string, required: (action == 'add')
      when "task"
        opt :id,
            "Contest id",
            type: :int, required: (action == 'edit') unless action == 'add'

        opt :name,
            "Task name",
            type: :string, required: (action == 'add')

        opt :statement,
            "Task statement",
            type: :string

        opt :checker,
            "Checker",
            type: :string

        opt :runner,
            "Solutions runner",
            type: :string

        opt :rule,
            "Points evaluation rule",
            type: :string

        opt :limits,
            "Limits",
            type: :string

        opt :testcases,
            "Folder with test cases",
            type: :string

        opt :contest,
            "Contest",
            type: :int
      when "testcases"
        opt :id,
            "Testcase id",
            type: :int if action == 'delete'

        opt :folder,
            'Input/Output files folder. Files should match /\A(\w*)\.(\d+)\.(in|out)\z/',
            type: :string, required: (action == 'add')

        opt :task,
            "Task",
            type: :int, required: true
      else
        Trollop::die 'What?!'
    end
  end
  all = cmd_opts[:all]
  cmd_opts.delete :all
  cmd_opts.delete :help
  cmd_opts[:end_date]   = parse cmd_opts[:end_date]
  cmd_opts[:start_date] = parse cmd_opts[:start_date]
  cmd_opts.reject! { |x| x.to_s =~ /_given\z/ }
  cmd_opts.reject! { |k, v| v.nil? }

  if domain == 'contest'

    case action
    when 'add'    then Rucomasy::Rat::ContestPersistanceManager.instance.add cmd_opts
    when 'delete' then Rucomasy::Rat::ContestPersistanceManager.instance.delete_matching all, cmd_opts
    when 'edit'   then Rucomasy::Rat::ContestPersistanceManager.instance.edit cmd_opts
    end
  elsif domain == 'task'
    cmd_opts[:contest] = Contest.get cmd_opts[:contest] if cmd_opts[:contest]

    case action
    when 'add'    then Rucomasy::Rat::TaskPersistanceManager.instance.add cmd_opts
    when 'delete' then Rucomasy::Rat::TaskPersistanceManager.instance.delete_matching all, cmd_opts
    when 'edit'   then Rucomasy::Rat::TaskPersistanceManager.instance.edit cmd_opts
    end
  elsif domain == 'testcases'
    case action
    when 'add'    then Rucomasy::Rat::TestcasePersistanceManager.instance.add_from_folder cmd_opts
    when 'delete' then Rucomasy::Rat::TestcasePersistanceManager.instance.delete_matching true, cmd_opts
    when 'edit'   then Trollop::die "Edit for testcases is not yet supported."
    end
  else
    Trollop::die 'What?!'
  end
end
