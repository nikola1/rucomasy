grammar Arithmetic
  rule result
    expr
  end

  rule expr
    number / variable / proc
  end

  rule proc
    '(' whitespace proc:(binary_proc / unary_proc / negation) whitespace ')'
    {
      def to_sexp
        proc.to_sexp
      end
    }
  end

  rule binary_proc
    o:binary_operator space a:expr space b:expr
    {
      def to_sexp
        [o.text_value.to_sym, a.to_sexp, b.to_sexp]
      end
    }
  end

  rule unary_proc
    name:unary_operator space arg:expr
    {
      def to_sexp
        [name.text_value.to_sym, arg.to_sexp]
      end
    }
  end

  rule negation
    '-' space arg:expr
    {
      def to_sexp
        [:negative, arg.to_sexp]
      end
    }
  end

  rule number
    '-'? [0-9]+ '.' [0-9]+
    {
      def to_sexp
        [:number, Float(text_value)]
      end
    } /
    '-'? [0-9]+
    {
      def to_sexp
        [:number, Integer(text_value)]
      end
    }
  end

  rule variable
    [a-z] [a-z0-9]*
    {
      def to_sexp
        [:variable, text_value.to_sym]
      end
    }
  end

  rule binary_operator
    '*' / '/' / '+' / '-' / 'max' / 'min'
  end

  rule unary_operator
    'sin' / 'cos' / 'abs'
  end

  rule space
    " "+
  end

  rule whitespace
    " "*
  end
end